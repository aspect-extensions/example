"""
Implement a 'build' task that wraps a build command.

Improvements over 'bazel build' command:

- customize some of the progess message text
- CAN: supports multiple bes backends
- CAN: process execlog in realtime
"""

# buildifier: disable=function-docstring
def impl(ctx: task_context) -> int:
    out = ctx.std.io.stdout
    events = True

    if ctx.args.bes_backend:
        if not ctx.args.bes_header:
            fail("--bes_header is required with --bes_backend")
        (k, _, v) = ctx.args.bes_header.partition("=")
        events = [
            bazel.build_events.grpc(
                uri = ctx.args.bes_backend,
                metadata = {k: v}
            )
        ]


    build = ctx.bazel.build(
        "//:*",
        events = events,
        bazel_flags = ["--isatty=" + str(int(out.is_tty)), "--curses=yes"]
    );
    for event in build.events():
        if event.kind == "progress":
            stderr = event.payload.stderr
            if "\x1b[32mComputing main repo mapping:\x1b[0m" in stderr:
                stderr = stderr.replace(
                    "\x1b[32mComputing main repo mapping:\x1b[0m",
                    "\x1b[0;32mINFO\x1b[0m: AXL: Computing repo mapping\n"
                )
            out.write(event.payload.stdout)
            out.write(stderr)

    build.wait()
    return 0

build = task(
    implementation = impl,
    args = {
        "targets": args.positional(min = 1),
        "bes_backend": args.string(),
        "bes_header": args.string()
    }
)
